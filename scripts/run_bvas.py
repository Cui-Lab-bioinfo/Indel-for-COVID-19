"""
In this example script we show how to use BVASSelector to analyze data generated by data/covid_preprocessing.py.
Note that we recommend running BVASSelector on GPU unless the number of alleles is moderate.
"""
import argparse,os
os.environ["CUDA_VISIBLE_DEVICES"] = '3'

import torch

from bvas import BVASSelector
from bvas.map import map_inference
from bvas.laplace import laplace_inference
from params import *
print(f"suffix: {suffix}")

def run(filename, S=50.0, nu_eff_multiplier=0.5, tau=100.0, T=500 * 1000, T_burnin=10 * 1000, seed=0):
    """
    :param str filename: Points to a `.pt` file generated by `data/covid_preprocessing.py`.
    :param float S: The number of non-neutral alleles expected a priori.
    :param float nu_eff_multiplier: Multiplier applied to the effective population size used in constructing
        the `Y` and `Gamma` tensors that reside in the file specified by `filename`.
    :param float tau: Controls the precision of the coefficients in the prior.
    :param int T: Positive integer that controls the number of MCMC samples that are
        generated (i.e. after burn-in/adaptation).
    :param int T_burnin: Positive integer that controls the number of MCMC samples that are
        generated during burn-in/adaptation.
    :param int seed: Random number seed for reproducibility.
    """
    data = torch.load(filename)
    mutations = data['mutations']

    s = "Running inference on {} with {} regions and {} selection coefficients..."
    print(s.format(filename, data['num_regions'], len(mutations)))

    if torch.cuda.is_available():
        Y = data['Y'].cuda().double()
        Gamma = data['Gamma'].cuda().double()
        genotype_matrix = data['genotype'].cuda().double()
    else:
        Y = data['Y'].double()
        Gamma = data['Gamma'].double()
        genotype_matrix = data['genotype'].double()

    selector = BVASSelector(Y,
                            Gamma,
                            mutations,
                            S=S,
                            nu_eff_multiplier=nu_eff_multiplier,
                            tau=tau,
                            genotype_matrix=genotype_matrix,
                            variant_names=data['pango_idx'],
                            clade_names=data['clade_idx'])

    selector.run(T=T, T_burnin=T_burnin, seed=seed)
    # selector.run(T=500, T_burnin=100, seed=seed)
    summary, growth_rates = selector.summary, selector.growth_rates
    print("\t \tbvas results\n",summary.iloc[:20],'\n',selector.growth_rates[:10])

    #compare to map inference
    map_results = map_inference(Y,
                                Gamma,
                                mutations,
                                tau_reg=2048.0)
    print("\t \t map results\n",map_results[:20])

    #compare to map inference with a sparsity inducing laplace prior
    laplace_results=laplace_inference(Y,
                                      Gamma,
                                      mutations,
                                      coef_scale=0.01)
    print("\t \t map laplace result\n",laplace_results[:20])




    # tag = ".S_{}.nueff_{}.tau_{}.T_{}_{}.s{}".format(S, int(100 * nu_eff_multiplier), tau, T, T_burnin, seed)
    # f = 'summary.' + filename[15:-3] + tag + '.csv'
    f = 'summary.' + filename[14:-3] + '.csv'
    print("saving csv to {}".format(f))
    summary.to_csv(f)

    # f = 'growthrates.' + filename[15:-3] + tag + '.csv'
    f = 'growthrates.' + filename[14:-3]  + '.csv'
    print("saving csv to {}".format(f))
    growth_rates.to_csv(f)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run BVAS')
    parser.add_argument('--seed', type=int, default=0)
    parser.add_argument('--T', type=int, default=500 * 1000)
    parser.add_argument('--Tb', type=int, default=10 * 1000)
    parser.add_argument('--nu-eff', type=float, default=0.5)
    parser.add_argument('--S', type=float, default=50.0)
    parser.add_argument('--tau', type=float, default=100.0)
    parser.add_argument('--filename', type=str,default=f'mts10k.mbs50.global-median.{suffix}.pt')
    args = parser.parse_args()

    run(args.filename, S=args.S, tau=args.tau, T=args.T, T_burnin=args.Tb,
        nu_eff_multiplier=args.nu_eff, seed=args.seed)
